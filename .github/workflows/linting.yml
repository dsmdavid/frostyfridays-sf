name: sqlfluff

on: 
  pull_request:
    branches: [main]
  workflow_dispatch:

# Set the environment variables needed for the run
env:
  dvd_sf_db: ${{  secrets.DVD_SF_DB }} 
  dvd_sf_schema: ${{  secrets.DVD_SF_SCHEMA }} 
  dvd_sf_wh: ${{  secrets.DVD_FROSTY_WH }} 
  dvd_sf_user: ${{ secrets.DVD_SF_USER }}
  dvd_sf_role: ${{ secrets.DVD_SF_ROLE }}
  dvd_sf_account: ${{ secrets.DVD_SF_ACCOUNT }}
  dvd_sf_passphrase: ${{ secrets.DVD_SF_PASSPHRASE }}
  SSH_KEY: ${{ secrets.SSH_KEY }}

jobs:
  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      allsql: ${{ steps.changes.outputs.allsql }}
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "this is the pull_request.base.sha: ${{ github.event.pull_request.base.sha }} "
          echo "this is the github.sha: ${{ github.sha }} "
          git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }}
          echo "allsql=$(git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^models.*[.]sql$' | xargs | sed -E ':a;s/(^|\s)[a-z](\s|$)/\1/Ig;ta')" >> $GITHUB_OUTPUT
          echo "this is what this would look like"
          git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E 'models.*[.]sql$' | xargs | sed -E ':a;s/(^|\s)[a-z](\s|$)/\1/Ig;ta'
          echo "allsql=$(git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E 'models.*[.]sql$' | xargs | sed -E ':a;s/(^|\s)[a-z](\s|$)/\1/Ig;ta')" >> $GITHUB_OUTPUT
      # - name: test output
      #   run: echo ${{ steps.changes.outputs.allsql }}

  sqlfluff-lint-models:
    name: Lint dbt models using SQLFluff
    needs: changedfiles
    runs-on: ubuntu-latest
    steps:
      - name: files to be linted
        run: |
          echo "These files will be checked"
          echo ${{needs.changedfiles.outputs.allsql}}

      - name: checkout branch
        uses: "actions/checkout@v3"
        with:
          ref: ${{ github.event.pull_request.head.sha }} # Check out the code of the PR

      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.8"
      - name: install requirements
        run: "pip install -r requirements.txt"

      - name: export pk
        run: |
          pwd 
          echo "-----BEGIN ENCRYPTED PRIVATE KEY-----" >> ./rsa_key_david_sf.p8
          echo ${{ secrets.SSH_KEY }} >> ./rsa_key_david_sf.p8 
          chmod 644 ./rsa_key_david_sf.p8 
          echo "-----END ENCRYPTED PRIVATE KEY-----" >> ./rsa_key_david_sf.p8
      - name: dbt test & deps
        run: |
          echo "DBT_PROFILES_DIR=$(pwd)/profiles" >> $GITHUB_ENV
          export DBT_PROFILES_DIR=$(pwd)/profiles
          echo "testing connection"
          dbt debug --target cicd
          echo "installing deps"
          dbt deps
# lifted from dbt_artifacts https://github.com/brooklyn-data/dbt_artifacts/blob/main/.github/workflows/ci_test_package.yml
      # - name: Get changed files
      #   id: get_file_changes
      #   uses: trilom/file-changes-action@v1.2.4
      #   with:
      #     output: ' '

      # - name: Get new and changed .sql files in /models to lint
      #   id: get_files_to_lint
      #   shell: bash -l {0}
      #   run: |
      #     # Set the command in the $() brackets as an env variable to use in later steps
      #     echo "lintees=$(
      #     # Issue where grep regular expressions don't work as expected on the
      #     # Github Actions shell, check dbt/models/ folder
      #     echo \
      #     $(echo ${{ steps.get_file_changes.outputs.files_modified }} |
      #     tr -s ' ' '\n' |
      #     grep -E '^models.*[.]sql$' |
      #     tr -s '\n' ' ') \
      #     $(echo ${{ steps.get_file_changes.outputs.files_added }} |
      #     tr -s ' ' '\n' |
      #     grep -E '^models.*[.]sql$' |
      #     tr -s '\n' ' ')
      #     )" >> $GITHUB_OUTPUT
      #     echo "to be exported"
      #     echo $GITHUB_OUTPUT
      - name: Lint dbt models
        if: needs.changedfiles.outputs.allsql != ''
        shell: bash -l {0}
        run: |
          rm .sqlfluff
          mv ./.sqlfluff_cicd ./.sqlfluff
          echo "output from prev job"
          echo ${{ needs.changedfiles.outputs.allsql }}
          echo "cwd"
          pwd
          echo "test 04_02"
          sqlfluff lint models/challenge_04_02_aux.sql
          echo "test ch39"
          sqlfluff lint models/challenge_39.sql
          echo "end test ch39"
          sqlfluff lint --dialect snowflake --format github-annotation --annotation-level failure --nofail ${{ needs.changedfiles.outputs.allsql }} > annotations.json
          sed -i '/^\[/!d' annotations.json # see https://github.com/sqlfluff/sqlfluff/issues/2244
          sqlfluff lint --dialect snowflake --format yaml --annotation-level failure --nofail ${{ needs.changedfiles.outputs.allsql }} > outputs.txt
  
        # run: |
        #   rm .sqlfluff
        #   mv ./.sqlfluff_cicd ./.sqlfluff
        #   echo "output from prev step"
        #   echo ${{ steps.get_files_to_lint.outputs.lintees }}
        #   echo "output from prev job"
        #   echo ${{ needs.changedfiles.outputs.allsql }}
        #   sqlfluff lint --dialect snowflake --format github-annotation --annotation-level failure --nofail ${{ steps.get_files_to_lint.outputs.lintees }} > annotations.json
        #   sed -i '/^\[/!d' annotations.json # see https://github.com/sqlfluff/sqlfluff/issues/2244
        #   echo "what does this json look like"
        #   cat ./annotations.json
        #   sqlfluff lint --dialect snowflake --format yaml --annotation-level failure --nofail ${{ steps.get_files_to_lint.outputs.lintees }} > outputs.txt
        #   echo "----------"
        #   echo "----------"
        #   echo "----------"
        #   echo "Attempting second approach"
        #   sqlfluff lint --dialect snowflake --format yaml --annotation-level failure --nofail ${{ needs.changedfiles.outputs.allsql }} > second_attempt.txt
        #   cat second_attempt.txt
      - name: Annotate
        if: needs.changedfiles.outputs.allsql != ''
        uses: yuzutech/annotations-action@v0.3.0
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          title: "SQLFluff Lint Comment"
          input: "./annotations.json"
      - uses: actions/upload-artifact@v2
        if: needs.changedfiles.outputs.allsql != ''
        with:
          name: outputs
          path: ./outputs.txt
      - name: say gg
        run: |
          echo "we're done"


  add-comment-file-from-file:
    name: add-comment-file
    runs-on: ubuntu-latest
    needs:   sqlfluff-lint-models
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: outputs
        # Create a summary for a PR comment
      # - name: check file exists
      #   run: |
      #        echo "finding file"
      #        find . -name outputs.txt
      #        echo "processing file"
      #        cat outputs.txt
      #        cat ./outputs.txt | grep 'processing\|FAIL\|PASS' > summary.txt
      #        echo "adding to summary"
      #        echo "" >> summary.txt
      #        echo "" >> summary.txt
      #        echo "" >> summary.txt
      #        echo "" >> summary.txt
      #        echo " --------- --------- --------" >> summary.txt
      #        echo "Detailed review below:" >> summary.txt
      #        cat ./outputs.txt >> summary.txt
      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ./outputs.txt
